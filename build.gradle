import com.github.spotbugs.SpotBugsTask
import org.springframework.boot.gradle.plugin.SpringBootPlugin


plugins {
    // SonarQube
    id 'org.sonarqube' version '2.6.2'
    // Spring Boot and dependency management
    id 'org.springframework.boot' version '2.0.4.RELEASE' apply false
    id 'com.github.spotbugs' version '1.6.2'
}

description = 'Project for anti-virus service'

allprojects {
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'groovy'
    apply plugin: 'idea'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'
    apply plugin: 'java'
    apply plugin: 'pmd'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    version = '0.5.3'

    ext {
        taskGroupName = 'AV-service'
        // Log4j version
        log4jVersion = '2.10.0'
        // Logstash Logback encoder version
        logstashLogbackVersion = '5.2'
        // Spock version
        spockVersion = '1.1-groovy-2.4'
        // Cglib nodep version
        cglibVersion = '3.2.7'
        // Equals verifier version
        equalsVerifierVersion = '2.5.2'
    }

    repositories {
        mavenCentral()

//        // Spring snapshots
//        maven {
//            url "http://repo.spring.io/snapshot"
//        }
//        // Spring milestones
//        maven {
//            url "http://repo.spring.io/milestone"
//        }
//        // Spring libs milestones
//        maven {
//            url "http://repo.spring.io/libs-milestone"
//        }
    }

    sourceSets {
        // integration tests
        integrationTest {
            groovy {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDir file('src/integration-test/groovy')
            }
            resources.srcDir file('src/integration-test/resources')
        }
        // performance tests
        performanceTest {
            groovy {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDir file('src/performance-test/groovy')
            }
            resources.srcDir file('src/performance-test/resources')
        }
    }

    configurations {
        // IT
        integrationTestCompile.extendsFrom testCompile
        integrationTestRuntime.extendsFrom testRuntime
        // PT
        performanceTestCompile.extendsFrom testCompile
        performanceTestRuntime.extendsFrom testRuntime
    }

    idea {
        module {
            // add integration test source dirs to IDEA
            testSourceDirs += file('src/integration-test/groovy')
            scopes.TEST.plus += [configurations.integrationTestCompile]
        }
    }

    dependencyManagement {
        imports {
            mavenBom(SpringBootPlugin.BOM_COORDINATES)
        }
    }

    dependencies {
        //
        // Logging
        //
        // Log4j API
        compile('org.apache.logging.log4j:log4j-api')
        // Log4j to SLF4J
        compile("org.apache.logging.log4j:log4j-to-slf4j:${log4jVersion}")
        // JCL to SLF4J & Logback
        compile('org.springframework.boot:spring-boot-starter-logging')
        // Logstash encoder
        compile("net.logstash.logback:logstash-logback-encoder:${logstashLogbackVersion}")

        //
        // Spring
        //
        // AMQP
        compile('org.springframework.boot:spring-boot-starter-amqp')
        // JMS
        compile('org.springframework.boot:spring-boot-starter-activemq')
        // Data JPA & Hibernate
        compile('org.springframework.boot:spring-boot-starter-data-jpa')
        // Data Solr
        compile('org.springframework.boot:spring-boot-starter-data-solr')
        // PostgreSQL
        compile('org.postgresql:postgresql')

        // MVC & Security
        // Moved to REST module

        // Joda time (for Spring Solr)
        compile group: 'joda-time', name: 'joda-time'

        // Ehcache
        compile("org.ehcache:ehcache")

        // EL
        compile group: 'javax.el', name: 'javax.el-api'
        compile group: 'org.glassfish.web', name: 'javax.el', version: '2.2.6'

        //
        // Testing
        //
        testCompile('org.springframework.boot:spring-boot-starter-test') {
            exclude module: 'assertj-core'
            exclude module: 'jsonassert'
            exclude module: 'json-path'
        }
        // Spock
        testCompile("org.spockframework:spock-core:${spockVersion}")
        testCompile("org.spockframework:spock-spring:${spockVersion}")
        // Cglib
        testCompile("cglib:cglib-nodep:${cglibVersion}")
        // Objenesis
        testCompile('org.objenesis:objenesis')
        // Equals verifier
        testCompile("nl.jqno.equalsverifier:equalsverifier:${equalsVerifierVersion}")
    }

    jar {
        baseName = "avservice-${project.name}"
    }

    test {
        maxParallelForks = 1

        minHeapSize = '128m'
        maxHeapSize = '128m'

        testLogging {
            exceptionFormat = 'full'
        }
    }

    task integrationTest(type: Test) {
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath

        mustRunAfter test

        minHeapSize = '128m'
        maxHeapSize = '128m'

        testLogging {
            // show events - "PASSED", "STARTED", "FAILED", "SKIPPED"
//            events "PASSED", "FAILED"
        }
    }

    task performanceTest(type: Test) {
        testClassesDirs = sourceSets.performanceTest.output.classesDirs
        classpath = sourceSets.performanceTest.runtimeClasspath
    }

    //
    // Quality tool configurations
    //
    checkstyle {
//        toolVersion = '7.3'
        configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
        reportsDir = file("${project.rootDir}/reports/checkstyle/${project.name}")
        sourceSets = [sourceSets.main]

        ignoreFailures = false
    }

    spotbugs {
        reportsDir = file("${project.rootDir}/reports/spotbugsReports/${project.name}")
        sourceSets = [sourceSets.main]

        effort = 'max'
        reportLevel = 'high'

        ignoreFailures = false
    }

    tasks.withType(SpotBugsTask) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    pmd {
        reportsDir = file("${project.rootDir}/reports/pmd/${project.name}")
        sourceSets = [sourceSets.main]

        ignoreFailures = false
    }

    jacoco {
        reportsDir = file("${project.rootDir}/reports/jacoco/${project.name}")
    }

    jacocoTestReport {
        executionData = fileTree(dir: 'build/jacoco', include: '**/*.exec')
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    sonarqube {
        properties {
            property 'sonar.jacoco.reportPath', "${buildDir}/jacoco/test.exec"
            property 'sonar.jacoco.itReportPath', "${buildDir}/jacoco/integrationTest.exec"
        }
    }

    // set reporting HTML output directory
    tasks.withType(Test) {
        reports.html.destination = file("${project.rootDir}/reports/test/${project.name}")
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:all"
    }

    clean {
        delete "${project.rootDir}/reports/"
    }

    task copyToLib(type: Copy) {
        from(configurations.runtime) {
        }
        into "$buildDir/libs"
    }

    build.dependsOn copyToLib

    check.dependsOn integrationTest
    check.dependsOn jacocoTestReport
    check.dependsOn javadoc
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.9'
    distributionType = Wrapper.DistributionType.ALL
}
