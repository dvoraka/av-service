ext {
    springVersion = '4.2.4.RELEASE'
    groovyVersion = '2.4.1'
    spockVersion = '1.0-groovy-2.4'
}

allprojects {
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
//    apply plugin: 'checkstyle'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    version = '0.1-SNAPSHOT'

    repositories {
        mavenCentral()
    }

    sourceSets {
        integrationTest {
            java {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDir file('src/integration-test/java')
            }
            groovy {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDir file('src/integration-test/groovy')
            }
            resources.srcDir file('src/integration-test/resources')
        }
    }

    configurations {
        integrationTestCompile.extendsFrom testCompile
        integrationTestRuntime.extendsFrom testRuntime
    }

    dependencies {
        // log4j
        compile('org.apache.logging.log4j:log4j-api:2.5')
        compile('org.apache.logging.log4j:log4j-core:2.5')
        // Spring
        compile("org.springframework:spring-core:${springVersion}")
        compile("org.springframework:spring-context:${springVersion}")
        compile('org.springframework.amqp:spring-rabbit:1.5.4.RELEASE')
        // Groovy
        compile("org.codehaus.groovy:groovy-all:${groovyVersion}")

        // Spring test
        testCompile("org.springframework:spring-test:${springVersion}")
        // Spock
        testCompile("org.spockframework:spock-spring:${spockVersion}")
        testCompile("org.spockframework:spock-core:${spockVersion}")
    }

    test {
        testLogging {
            exceptionFormat = 'full'
        }
    }

    task integrationTest(type: Test) {
        testClassesDir = sourceSets.integrationTest.output.classesDir
        classpath = sourceSets.integrationTest.runtimeClasspath

        testLogging {
            // show events - "PASSED", "STARTED", "FAILED", "SKIPPED"
            events "PASSED", "FAILED"
        }
    }

//    checkstyle {
//        toolVersion = "6.5"
//    }

    // set reporting HTML output directory
    tasks.withType(Test) {
        reports.html.destination = file("${reporting.baseDir}/${name}")
    }

    check.dependsOn integrationTest
    integrationTest.mustRunAfter test
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}
