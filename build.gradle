plugins {
    id "org.sonarqube" version "2.0.1"
}

apply plugin: 'distribution'

description = 'Project for anti-virus service'

distributions {
    main {
    }

    checker {
        baseName = 'checker'
        contents {
            from('checker/build/libs/') {
                into 'lib/'
            }
            from('checker/LICENSE') {
                into ''
            }
            from('checker/bin') {
                into 'bin/'
            }
            from('checker/src/main/resources/log4j2.xml') {
                into 'conf/'
            }
        }
    }
}

allprojects {
    ext {
        taskGroupName = 'AV-service'
        // Spring versions
        springVersion = '4.3.0.RELEASE'
        springSecurityVersion = '4.1.0.RELEASE'
        springRabbitVersion = '1.6.2.RELEASE'
        springDataJpaVersion = '1.10.2.RELEASE'

        hibernateVersion = '5.2.1.Final'
        groovyVersion = '2.4.7'
        spockVersion = '1.0-groovy-2.4'
        log4jVersion = '2.6.2'
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'
    apply plugin: 'pmd'
    apply plugin: 'jacoco'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    version = '0.2-SNAPSHOT'

    repositories {
        mavenCentral()
    }

    sourceSets {
        integrationTest {
            groovy {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDir file('src/integration-test/groovy')
            }
            resources.srcDir file('src/integration-test/resources')
        }
    }

    configurations {
        integrationTestCompile.extendsFrom testCompile
        integrationTestRuntime.extendsFrom testRuntime
    }

    dependencies {
        // log4j
        compile("org.apache.logging.log4j:log4j-api:${log4jVersion}")
//        compile("org.apache.logging.log4j:log4j-core:${log4jVersion}")
//        compile("org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}")
//        compile("org.apache.logging.log4j:log4j-jcl:${log4jVersion}")
        // bridge to Logback
        compile("org.apache.logging.log4j:log4j-to-slf4j:${log4jVersion}")
        compile("ch.qos.logback:logback-classic:1.1.6")
        compile('net.logstash.logback:logstash-logback-encoder:4.7')
        // Spring
        compile("org.springframework:spring-core:${springVersion}")
        compile("org.springframework:spring-context:${springVersion}")
        compile("org.springframework.amqp:spring-rabbit:${springRabbitVersion}") {
            exclude group: 'org.springframework', module: 'spring-web'
            exclude group: 'org.springframework', module: 'spring-tx'
            exclude group: 'org.springframework', module: 'spring-messaging'
        }
        // Groovy
        compile("org.codehaus.groovy:groovy-all:${groovyVersion}")

        // Spring test
        testCompile("org.springframework:spring-test:${springVersion}")
        // Spock
        testCompile("org.spockframework:spock-spring:${spockVersion}")
        testCompile("org.spockframework:spock-core:${spockVersion}")
        // Cglib
        testCompile('cglib:cglib-nodep:3.2.2')
    }

    jar {
        baseName = "avservice-${project.name}"
    }

    test {
        maxParallelForks = 1

        minHeapSize = '128m'
        maxHeapSize = '128m'

        testLogging {
            exceptionFormat = 'full'
        }
    }

    task integrationTest(type: Test) {
        testClassesDir = sourceSets.integrationTest.output.classesDir
        classpath = sourceSets.integrationTest.runtimeClasspath

        minHeapSize = '64m'
        maxHeapSize = '64m'

        testLogging {
            // show events - "PASSED", "STARTED", "FAILED", "SKIPPED"
//            events "PASSED", "FAILED"
        }
    }

    checkstyle {
        toolVersion = "7.1"
        configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
        reportsDir = file("${project.rootDir}/reports/checkstyle/${project.name}")

        ignoreFailures = false
    }

    findbugs {
        reportsDir = file("${project.rootDir}/reports/findbugsReports/${project.name}")
        reportLevel = 'medium'

        sourceSets = [sourceSets.main]

        ignoreFailures = false
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    pmd {
        toolVersion = '5.5.1'
        reportsDir = file("${project.rootDir}/reports/pmd/${project.name}")

        ignoreFailures = false
    }

    jacoco {
        toolVersion = '0.7.7.201606060606'
        reportsDir = file("${project.rootDir}/reports/jacoco/${project.name}")
    }

    jacocoTestReport {
        executionData = fileTree(dir: 'build/jacoco', include: '**/*.exec')
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    sonarqube {
        properties {
            property 'sonar.jacoco.reportPath', "${buildDir}/jacoco/test.exec"
            property 'sonar.jacoco.itReportPath', "${buildDir}/jacoco/integrationTest.exec"
        }
    }

    // set reporting HTML output directory
    tasks.withType(Test) {
        reports.html.destination = file("${project.rootDir}/reports/test/${project.name}")
    }

    clean {
        delete "${project.rootDir}/reports/"
    }

    task copyToLib(type: Copy) {
        from(configurations.runtime) {
        }
        into "$buildDir/libs"
    }

    build.dependsOn copyToLib

    check.dependsOn integrationTest
    integrationTest.mustRunAfter test
    check.dependsOn jacocoTestReport
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.0'
}
