{
  "name": "Av-service",
  "tagline": "Anti-virus service",
  "body": "# Anti-virus service\r\n[![Build Status](https://travis-ci.org/dvoraka/av-service.svg?branch=master)](https://travis-ci.org/dvoraka/av-service)\r\n[![codecov.io](https://codecov.io/github/dvoraka/av-service/coverage.svg)](https://codecov.io/github/dvoraka/av-service/branch/master)\r\n\r\nReplacement for [amqpav](https://github.com/dvoraka/amqpav). Network anti-virus service supports JMS, AMQP and HTTP for communication. AV-checker project was integrated as checker submodule.\r\n\r\n* [Planned features](#planned-features)\r\n* [Used components](#used-components)\r\n* [Installation](#installation)\r\n* [Run services](#run-service)\r\n* [Load tests](#load-results-for-the-old-service-retested-february-20-2016)\r\n\r\n--\r\n### Planned features\r\n* Highly scalable architecture\r\n* Robust design\r\n* Communication over AMQP 0.9.1, JMS and REST\r\n\r\n**Later**\r\n* AMQP 1.0\r\n* Message tracking DB service (usefull for bigger deployments)\r\n\r\n### Used components\r\n * **ClamaAV** - open source anti-virus engine\r\n * **RabbitMQ** - open source message broker for AMQP\r\n * **ActiveMQ** - open source message broker for JMS\r\n\r\n**Frameworks and libraries**\r\n * **Spring**\r\n * **Spring REST** - REST\r\n * **Spring AMQP** - AMQP\r\n * **Spring JMS** - JMS\r\n * **Ehcache 3** - caching\r\n * **Spock** - testing\r\n * **Log4j 2** - logging\r\n\r\n**Code quality**\r\n * **Checkstyle**\r\n * **FindBugs**\r\n * **PMD**\r\n * **JaCoCo**\r\n * **SonarQube**\r\n\r\n**Build**\r\n * **Gradle** - build\r\n * **Docker** - environment preparation\r\n\r\n**Development**\r\n * **ELK Stack** (Elasticsearch, Logstash, Kibana) - logs analyzing\r\n\r\n### Installation\r\nYou can use Docker to prepare necessary services for development.\r\n#### Docker\r\nDocker is recommended approach.\r\n\r\n**Services**\r\n* RabbitMQ\r\n* ActiveMQ\r\n* ClamAV daemon\r\n* PostgreSQL\r\n* Kibana\r\n* Elasticsearch\r\n* Logstash\r\n\r\nChange your working directory to *docker*:\r\n```\r\n$ cd docker/\r\n```\r\nAnd run ```docker-compose up``` command:\r\n```\r\n$ docker-compose up\r\n```\r\nIt prepares services running on **localhost**.\r\n\r\n**Configuration:**\r\n\r\nFor setting environment it is necessary to run a command from the **root** directory:\r\n\r\nchange to project root\r\n```\r\n$ cd ..\r\n```\r\nand\r\n```\r\n$ ./gradlew configureEnvironment\r\n```\r\nAnd everything should be prepared for running.\r\n\r\n### Manual installation (currently not recommended)\r\n#### ClamAV\r\n#### Debian\r\n```\r\n# apt-get install clamav-daemon\r\n```\r\nOfficial [installation](http://www.clamav.net/documents/installing-clamav) for other systems.\r\n\r\n##### Configuration\r\nFor Jessie it is better to use `dpkg-reconfigure clamav-daemon` and enable TCP socket there because of systemd integration. Don't use names (e.g., **localhost**) as the address.\r\n\r\nOR\r\n\r\nManually change the configuration file `/etc/clamav/clamd.conf`:\r\n```\r\nTCPSocket 3310\r\nTCPAddr 127.0.0.1\r\n```\r\nThis is for enabling TCP socket on a default port and localhost.\r\n\r\n#### RabbitMQ\r\n#### Debian\r\n```\r\n# apt-get install rabbitmq-server\r\n```\r\n##### Configuration\r\nYou can use the script `tools/prepareRMQ.sh` to create the basic configuration. It creates a new virtual host called **antivirus** and adds permissions for **guest** user.\r\n\r\n### Run service\r\nCurrently everything is rather in a prototype phase.\r\n\r\n#### AMQP\r\n```\r\n$ ./gradlew runAmqpServer\r\n```\r\n#### JMS\r\n```\r\n$ ./gradlew runJmsServer\r\n```\r\n#### REST\r\n```\r\n$ ./gradlew appStart\r\n```\r\n\r\n### AMQP checker\r\n\r\nUtility for testing AMQP infrastructure.\r\n#### Run\r\n```\r\n$ ./gradlew -q amqpCheck\r\n```\r\nAnd output should be:\r\n```\r\n...\r\nTest OK\r\n```\r\n#### Create jar with dependencies\r\n```\r\n$ ./gradlew :checker:shadowJar\r\n```\r\nAnd the full jar will be in `checker/build/libs/` directory.\r\n\r\n#### Run jar\r\nBuilt jar is executable.\r\n##### Properties:\r\n* host - message broker host\r\n* infected - infection flag (true/false)\r\n* appid - application ID string\r\n```\r\n$ java -Dhost=localhost -jar checker-0.1-SNAPSHOT-all.jar\r\n```\r\nAnd output should be:\r\n```\r\n...\r\nTest OK\r\n```\r\n\r\n## Load results for the old service (retested February 20, 2016):\r\n\r\nMessage broker, server and anti-virus program are on the same machine. Sending file is EICAR.\r\n\r\nClient is on a different machine.\r\n\r\n* Receiver: AVReceiver\r\n* Sender: AVSender\r\n\r\n##### How to run load test\r\n```\r\n$ ./gradlew loadTest\r\n```\r\nConfiguration file is loadTest.xml in resources directory.\r\n\r\n##### Load tests\r\n```\r\nLoad test start for 1000 messages...\r\nLoad test end\r\nDuration: 20 s\r\nMessages: 50/s\r\n```\r\n```\r\nLoad test start for 10 000 messages...\r\nLoad test end\r\nDuration: 178 s\r\nMessages: 56/s\r\n```\r\n```\r\nLoad test start for 100 000 messages...\r\nLoad test end\r\nDuration: 1800 s\r\nMessages: 56/s\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}