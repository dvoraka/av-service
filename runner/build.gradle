description = 'Module for runners'

dependencies {
    compile project(':common')
    compile project(':server')
}

task configureEnvironment(type: JavaExec) {
    description = 'Configure environment'
    group = "${taskGroupName}"

    main = 'dvoraka.avservice.runner.EnvironmentConfigurator'
    classpath = sourceSets.main.runtimeClasspath
}

task runAmqpCheck(type: JavaExec) {
    description = 'Run AMQP infrastructure check'
    group = "${taskGroupName}"

    main = 'dvoraka.avservice.runner.client.amqp.AmqpCheckRunner'
    classpath = sourceSets.main.runtimeClasspath
}

task runAmqpLoadTest(type: JavaExec) {
    description = 'Run AMQP AV check load test'
    group = "${taskGroupName}"

    main = 'dvoraka.avservice.runner.client.amqp.AmqpLoadTestRunner'
    classpath = sourceSets.main.runtimeClasspath
//    environment('avservice.perf.msgCount', 2)
}

task runAmqpCheckServer(type: JavaExec) {
    description = 'Run AMQP AV check server'
    group = "${taskGroupName}"

    main = 'dvoraka.avservice.runner.server.amqp.AmqpCheckServerRunner'
    standardInput = System.in
    classpath = sourceSets.main.runtimeClasspath
}

task runAmqpFileServer(type: JavaExec) {
    description = 'Run AMQP file server'
    group = "${taskGroupName}"

    main = 'dvoraka.avservice.runner.server.amqp.AmqpFileServerRunner'
    standardInput = System.in
    classpath = sourceSets.main.runtimeClasspath
}

task runAmqpFileServerWithReplication(type: JavaExec) {
    description = 'Run AMQP file server with replication'
    group = "${taskGroupName}"

    main = 'dvoraka.avservice.runner.server.amqp.AmqpFileServerReplicationRunner'
    standardInput = System.in
    classpath = sourceSets.main.runtimeClasspath
}

task runAmqpToJmsBridge(type: JavaExec) {
    description = 'Run AMQP to JMS bridge'
    group = "${taskGroupName}"

    main = 'dvoraka.avservice.runner.server.amqp.AmqpToJmsBridgeRunner'
    standardInput = System.in
    classpath = sourceSets.main.runtimeClasspath
}

task runAmqpReplicationService(type: JavaExec) {
    description = 'Run AMQP replication service'
    group = "${taskGroupName}"

    minHeapSize = '256m'
    maxHeapSize = '256m'

    main = 'dvoraka.avservice.runner.server.amqp.AmqpReplicationServiceRunner'
    standardInput = System.in
    classpath = sourceSets.main.runtimeClasspath
}

task runCustomServer(type: JavaExec) {
    description = 'Run custom server'
    group = "${taskGroupName}"

    main = 'dvoraka.avservice.runner.server.CustomServerRunner'
    standardInput = System.in
    classpath = sourceSets.main.runtimeClasspath
}

task runJmsCheck(type: JavaExec) {
    description = 'Run JMS infrastructure check'
    group = "${taskGroupName}"

    main = 'dvoraka.avservice.runner.client.jms.JmsCheckRunner'
    classpath = sourceSets.main.runtimeClasspath
}

task runJmsLoadTest(type: JavaExec) {
    description = 'Run JMS AV check load test'
    group = "${taskGroupName}"

    main = 'dvoraka.avservice.runner.client.jms.JmsLoadTestRunner'
    classpath = sourceSets.main.runtimeClasspath
//    environment('avservice.perf.msgCount', 2)
}

task runJmsCheckServer(type: JavaExec) {
    description = 'Run JMS AV check server'
    group = "${taskGroupName}"

    main = 'dvoraka.avservice.runner.server.jms.JmsCheckServerRunner'
    standardInput = System.in
    classpath = sourceSets.main.runtimeClasspath
}

task runJmsFileServer(type: JavaExec) {
    description = 'Run JMS file server server'
    group = "${taskGroupName}"

    main = 'dvoraka.avservice.runner.server.jms.JmsFileServerRunner'
    standardInput = System.in
    classpath = sourceSets.main.runtimeClasspath
}

task runJmsToAmqpBridge(type: JavaExec) {
    description = 'Run JMS to AMQP bridge'
    group = "${taskGroupName}"

    main = 'dvoraka.avservice.runner.server.jms.JmsToAmqpBridgeRunner'
    standardInput = System.in
    classpath = sourceSets.main.runtimeClasspath
}
